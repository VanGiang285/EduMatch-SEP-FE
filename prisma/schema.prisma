
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(STUDENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tutorProfile TutorProfile?
  bookings     Booking[]     @relation("StudentBookings")
  reviews      Review[]      @relation("StudentReviews")
  tutorBookings Booking[]    @relation("TutorBookings")
  tutorReviews  Review[]     @relation("TutorReviews")

  @@map("users")
}

model TutorProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  subjects       String[]
  hourlyRate     Float
  rating         Float    @default(0)
  totalStudents  Int      @default(0)
  bio            String
  experience     Int      // years
  education      String
  certifications String[]
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings   Booking[]
  reviews    Review[]
  availability Availability[]

  @@map("tutor_profiles")
}

model Availability {
  id        String   @id @default(cuid())
  tutorId   String
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // "09:00"
  endTime   String   // "17:00"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tutor TutorProfile @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@map("availability")
}

model Booking {
  id        String        @id @default(cuid())
  studentId String
  tutorId   String
  subject   String
  startTime DateTime
  endTime   DateTime
  status    BookingStatus @default(PENDING)
  price     Float
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  student User   @relation("StudentBookings", fields: [studentId], references: [id])
  tutor   User   @relation("TutorBookings", fields: [tutorId], references: [id])
  reviews Review[]

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  studentId String
  tutorId   String
  rating    Int      // 1-5
  comment   String
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  student User    @relation("StudentReviews", fields: [studentId], references: [id])
  tutor   User    @relation("TutorReviews", fields: [tutorId], references: [id])

  @@map("reviews")
}

enum UserRole {
  STUDENT
  TUTOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}